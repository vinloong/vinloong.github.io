"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7818],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>f});var r=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var o=r.createContext({}),c=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=c(e.components);return r.createElement(o.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,a=e.originalType,o=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(t),m=s,f=p["".concat(o,".").concat(m)]||p[m]||u[m]||a;return t?r.createElement(f,i(i({ref:n},d),{},{components:t})):r.createElement(f,i({ref:n},d))}));function f(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var a=t.length,i=new Array(a);i[0]=m;var l={};for(var o in n)hasOwnProperty.call(n,o)&&(l[o]=n[o]);l.originalType=e,l[p]="string"==typeof e?e:s,i[1]=l;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8647:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>d});t(7294);var r=t(3905);function s(){return s=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},s.apply(this,arguments)}function a(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}const i={},l=void 0,o={unversionedId:"kubernetes/practice/redis",id:"kubernetes/practice/redis",title:"redis",description:"\u54e8\u5175\u6a21\u5f0f",source:"@site/docs/kubernetes/practice/redis.md",sourceDirName:"kubernetes/practice",slug:"/kubernetes/practice/redis",permalink:"/docs/kubernetes/practice/redis",draft:!1,tags:[],version:"current",lastUpdatedAt:1675912862,formattedLastUpdatedAt:"2023\u5e742\u67089\u65e5",frontMatter:{},sidebar:"kubernetes",previous:{title:"\u4f7f\u7528 Prometheus \u76d1\u63a7 kafka",permalink:"/docs/kubernetes/practice/prometheus-kafka"},next:{title:"\u4e3a\u7cfb\u7edf\u5b88\u62a4\u8fdb\u7a0b\u9884\u7559\u8ba1\u7b97\u8d44\u6e90",permalink:"/docs/kubernetes/practice/reserve-compute-resources"}},c={},d=[{value:"\u54e8\u5175\u6a21\u5f0f",id:"\u54e8\u5175\u6a21\u5f0f",level:2},{value:"\u96c6\u7fa4\u6a21\u5f0f",id:"\u96c6\u7fa4\u6a21\u5f0f",level:2},{value:"helm \u5b89\u88c5",id:"helm-\u5b89\u88c5",level:3},{value:"\u624b\u52a8\u5b89\u88c5",id:"\u624b\u52a8\u5b89\u88c5",level:3}],p={toc:d},u="wrapper";function m(e){var{components:n}=e,t=a(e,["components"]);return(0,r.kt)(u,s({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",s({},{id:"\u54e8\u5175\u6a21\u5f0f"}),"\u54e8\u5175\u6a21\u5f0f"),(0,r.kt)("pre",null,(0,r.kt)("code",s({parentName:"pre"},{}),"helm repo add bitnami https://charts.bitnami.com/bitnami\n\nhttps://raw.githubusercontent.com/bitnami/charts/main/bitnami/redis/values.yaml\n\nhelm install -n redis redis-sentinel bitnami/redis -f values.yaml\n\n\n\n\n")),(0,r.kt)("h2",s({},{id:"\u96c6\u7fa4\u6a21\u5f0f"}),"\u96c6\u7fa4\u6a21\u5f0f"),(0,r.kt)("h3",s({},{id:"helm-\u5b89\u88c5"}),"helm \u5b89\u88c5"),(0,r.kt)("pre",null,(0,r.kt)("code",s({parentName:"pre"},{className:"language-shell"}),"wget https://raw.githubusercontent.com/bitnami/charts/main/bitnami/redis-cluster/values.yaml\nhelm install -n redis redis-cluster -f values.yaml bitnami/redis-cluster\n")),(0,r.kt)("h3",s({},{id:"\u624b\u52a8\u5b89\u88c5"}),"\u624b\u52a8\u5b89\u88c5"),(0,r.kt)("pre",null,(0,r.kt)("code",s({parentName:"pre"},{className:"language-yaml"}),"kind: Secret\napiVersion: v1\nmetadata:\n  name: redis-cluster\n  namespace: redis\n  labels:\n    app.kubernetes.io/instance: redis-cluster\n    app.kubernetes.io/name: redis-cluster\n  annotations:\n    meta.helm.sh/release-name: redis-cluster\n    meta.helm.sh/release-namespace: redis\ndata:\n  redis-password: RmFzXzEyMw==\ntype: Opaque\n")),(0,r.kt)("pre",null,(0,r.kt)("code",s({parentName:"pre"},{className:"language-yaml"}),'kind: ConfigMap\napiVersion: v1\nmetadata:\n  name: redis-cluster-scripts\n  namespace: redis\n  labels:\n    app.kubernetes.io/instance: redis-cluster\n    app.kubernetes.io/name: redis-cluster\n  annotations:\n    meta.helm.sh/release-name: redis-cluster\n    meta.helm.sh/release-namespace: redis\ndata:\n  ping_liveness_local.sh: >-\n    #!/bin/sh\n\n    set -e\n\n    if [ ! -z "$REDIS_PASSWORD" ]; then export REDISCLI_AUTH=$REDIS_PASSWORD;\n    fi;\n\n    response=$(\n      timeout -s 3 $1 \\\n      redis-cli \\\n        -h localhost \\\n        -p $REDIS_PORT \\\n        ping\n    )\n\n    if [ "$?" -eq "124" ]; then\n      echo "Timed out"\n      exit 1\n    fi\n\n    responseFirstWord=$(echo $response | head -n1 | awk \'{print $1;}\')\n\n    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [\n    "$responseFirstWord" != "MASTERDOWN" ]; then\n      echo "$response"\n      exit 1\n    fi\n  ping_readiness_local.sh: >-\n    #!/bin/sh\n\n    set -e\n\n\n    REDIS_STATUS_FILE=/tmp/.redis_cluster_check\n\n    if [ ! -z "$REDIS_PASSWORD" ]; then export REDISCLI_AUTH=$REDIS_PASSWORD;\n    fi;\n\n    response=$(\n      timeout -s 3 $1 \\\n      redis-cli \\\n        -h localhost \\\n        -p $REDIS_PORT \\\n        ping\n    )\n\n    if [ "$?" -eq "124" ]; then\n      echo "Timed out"\n      exit 1\n    fi\n\n    if [ "$response" != "PONG" ]; then\n      echo "$response"\n      exit 1\n    fi\n\n    if [ ! -f "$REDIS_STATUS_FILE" ]; then\n      response=$(\n        timeout -s 3 $1 \\\n        redis-cli \\\n          -h localhost \\\n          -p $REDIS_PORT \\\n          CLUSTER INFO | grep cluster_state | tr -d \'[:space:]\'\n      )\n      if [ "$?" -eq "124" ]; then\n        echo "Timed out"\n        exit 1\n      fi\n      if [ "$response" != "cluster_state:ok" ]; then\n        echo "$response"\n        exit 1\n      else\n        touch "$REDIS_STATUS_FILE"\n      fi\n    fi\n')),(0,r.kt)("pre",null,(0,r.kt)("code",s({parentName:"pre"},{className:"language-yaml"}),'kind: ConfigMap\napiVersion: v1\nmetadata:\n  name: redis-cluster-default\n  namespace: redis\n  labels:\n    app.kubernetes.io/instance: redis-cluster\n    app.kubernetes.io/name: redis-cluster\n  annotations:\n    meta.helm.sh/release-name: redis-cluster\n    meta.helm.sh/release-namespace: redis\ndata:\n  redis-default.conf: |\n    bind 0.0.0.0\n    protected-mode yes\n    port 6379\n    tcp-backlog 511\n    timeout 0\n    tcp-keepalive 300\n    daemonize no\n    pidfile /opt/bitnami/redis/tmp/redis_6379.pid\n    loglevel notice\n    logfile ""\n    databases 16\n    always-show-logo yes\n    set-proc-title yes\n    proc-title-template "{title} {listen-addr} {server-mode}"\n    save 900 1\n    save 300 10\n    save 60 10000\n    stop-writes-on-bgsave-error yes\n    rdbcompression yes\n    rdbchecksum yes\n    dbfilename dump.rdb\n    rdb-del-sync-files no\n    dir /bitnami/redis/data\n    replica-serve-stale-data yes\n    replica-read-only yes\n    repl-diskless-sync no\n    repl-diskless-sync-delay 5\n    repl-diskless-sync-max-replicas 0\n    repl-diskless-load disabled\n    repl-disable-tcp-nodelay no\n    replica-priority 100\n    acllog-max-len 128\n    lazyfree-lazy-eviction no\n    lazyfree-lazy-expire no\n    lazyfree-lazy-server-del no\n    replica-lazy-flush no\n    lazyfree-lazy-user-del no\n    lazyfree-lazy-user-flush no\n    oom-score-adj no\n    oom-score-adj-values 0 200 800\n    disable-thp yes\n    appendonly yes\n    appendfilename "appendonly.aof"\n    appenddirname "appendonlydir"\n    appendfsync everysec\n    no-appendfsync-on-rewrite no\n    auto-aof-rewrite-percentage 100\n    auto-aof-rewrite-min-size 64mb\n    aof-load-truncated yes\n    aof-use-rdb-preamble yes\n    aof-timestamp-enabled no\n    ua-time-limit 5000\n    cluster-enabled yes\n    cluster-config-file /bitnami/redis/data/nodes.conf\n    slowlog-log-slower-than 10000\n    slowlog-max-len 128\n    latency-monitor-threshold 0\n    notify-keyspace-events ""\n    hash-max-listpack-entries 512\n    hash-max-listpack-value 64\n    list-max-listpack-size -2\n    list-compress-depth 0\n    set-max-intset-entries 512\n    zset-max-listpack-entries 128\n    zset-max-listpack-value 64\n    hll-sparse-max-bytes 3000\n    stream-node-max-bytes 4096\n    stream-node-max-entries 100\n    activerehashing yes\n    client-output-buffer-limit normal 0 0 0\n    client-output-buffer-limit replica 256mb 64mb 60\n    client-output-buffer-limit pubsub 32mb 8mb 60\n    hz 10\n    dynamic-hz yes\n    aof-rewrite-incremental-fsync yes\n    rdb-save-incremental-fsync yes\n    jemalloc-bg-thread yes\n\n')),(0,r.kt)("pre",null,(0,r.kt)("code",s({parentName:"pre"},{className:"language-yaml"}),'kind: StatefulSet\napiVersion: apps/v1\nmetadata:\n  name: redis-cluster\n  namespace: redis\n  labels:\n    app.kubernetes.io/instance: redis-cluster\n    app.kubernetes.io/name: redis-cluster\n  annotations:\n    meta.helm.sh/release-name: redis-cluster\n    meta.helm.sh/release-namespace: redis\nspec:\n  replicas: 6\n  selector:\n    matchLabels:\n      app.kubernetes.io/instance: redis-cluster\n      app.kubernetes.io/name: redis-cluster\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/instance: redis-cluster\n        app.kubernetes.io/name: redis-cluster\n    spec:\n      volumes:\n        - name: scripts\n          configMap:\n            name: redis-cluster-scripts\n            defaultMode: 493\n        - name: default-config\n          configMap:\n            name: redis-cluster-default\n            defaultMode: 420\n        - name: redis-tmp-conf\n          emptyDir: {}\n      containers:\n        - name: redis-cluster\n          image: \'docker.io/bitnami/redis-cluster:7.0.5-debian-11-r0\'\n          command:\n            - /bin/bash\n            - \'-c\'\n          args:\n            - >\n              # Backwards compatibility change\n\n              if ! [[ -f /opt/bitnami/redis/etc/redis.conf ]]; then\n                  echo COPYING FILE\n                  cp  /opt/bitnami/redis/etc/redis-default.conf /opt/bitnami/redis/etc/redis.conf\n              fi\n\n              pod_index=($(echo "$POD_NAME" | tr "-" "\\n"))\n\n              pod_index="${pod_index[-1]}"\n\n              if [[ "$pod_index" == "0" ]]; then\n                export REDIS_CLUSTER_CREATOR="yes"\n                export REDIS_CLUSTER_REPLICAS="1"\n              fi\n\n              /opt/bitnami/scripts/redis-cluster/entrypoint.sh\n              /opt/bitnami/scripts/redis-cluster/run.sh\n          ports:\n            - name: tcp-redis\n              containerPort: 6379\n              protocol: TCP\n            - name: tcp-redis-bus\n              containerPort: 16379\n              protocol: TCP\n          env:\n            - name: POD_NAME\n              valueFrom:\n                fieldRef:\n                  apiVersion: v1\n                  fieldPath: metadata.name\n            - name: REDIS_NODES\n              value: >-\n                redis-cluster-0.redis-cluster-headless\n                redis-cluster-1.redis-cluster-headless\n                redis-cluster-2.redis-cluster-headless\n                redis-cluster-3.redis-cluster-headless\n                redis-cluster-4.redis-cluster-headless\n                redis-cluster-5.redis-cluster-headless \n            - name: REDISCLI_AUTH\n              valueFrom:\n                secretKeyRef:\n                  name: redis-cluster\n                  key: redis-password\n            - name: REDIS_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: redis-cluster\n                  key: redis-password\n            - name: REDIS_AOF_ENABLED\n              value: \'yes\'\n            - name: REDIS_TLS_ENABLED\n              value: \'no\'\n            - name: REDIS_PORT\n              value: \'6379\'\n          resources: {}\n          volumeMounts:\n            - name: scripts\n              mountPath: /scripts\n            - name: redis-data\n              mountPath: /bitnami/redis/data\n            - name: default-config\n              mountPath: /opt/bitnami/redis/etc/redis-default.conf\n              subPath: redis-default.conf\n            - name: redis-tmp-conf\n              mountPath: /opt/bitnami/redis/etc/\n          livenessProbe:\n            exec:\n              command:\n                - sh\n                - \'-c\'\n                - /scripts/ping_liveness_local.sh 5\n            initialDelaySeconds: 5\n            timeoutSeconds: 6\n            periodSeconds: 5\n            successThreshold: 1\n            failureThreshold: 5\n          readinessProbe:\n            exec:\n              command:\n                - sh\n                - \'-c\'\n                - /scripts/ping_readiness_local.sh 1\n            initialDelaySeconds: 5\n            timeoutSeconds: 2\n            periodSeconds: 5\n            successThreshold: 1\n            failureThreshold: 5\n          terminationMessagePath: /dev/termination-log\n          terminationMessagePolicy: File\n          imagePullPolicy: IfNotPresent\n          securityContext:\n            runAsUser: 1001\n            runAsNonRoot: true\n      restartPolicy: Always\n      terminationGracePeriodSeconds: 30\n      dnsPolicy: ClusterFirst\n      serviceAccountName: default\n      serviceAccount: default\n      securityContext:\n        runAsUser: 1001\n        fsGroup: 1001\n      affinity:\n        nodeAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n            nodeSelectorTerms:\n              - matchExpressions:\n                  - key: redis\n                    operator: In\n                    values:\n                      - enabled\n        podAntiAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n            - labelSelector:\n                matchExpressions:\n                  - key: app.kubernetes.io/instance\n                    operator: In\n                    values:\n                      - redis-cluster\n              topologyKey: kubernetes.io/hostname\n      schedulerName: default-scheduler\n      enableServiceLinks: false\n  volumeClaimTemplates:\n    - kind: PersistentVolumeClaim\n      apiVersion: v1\n      metadata:\n        name: redis-data\n        labels:\n          app.kubernetes.io/instance: redis-cluster\n          app.kubernetes.io/name: redis-cluster\n      spec:\n        accessModes:\n          - ReadWriteMany\n        resources:\n          requests:\n            storage: 10Gi\n        volumeMode: Filesystem\n      status:\n        phase: Pending\n  serviceName: redis-cluster-headless\n  podManagementPolicy: Parallel\n  updateStrategy:\n    type: RollingUpdate\n    rollingUpdate:\n      partition: 0\n  revisionHistoryLimit: 10\n\n')))}m.isMDXComponent=!0}}]);