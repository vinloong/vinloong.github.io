"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7141],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>b});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),u=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=u(e.components);return r.createElement(c.Provider,{value:n},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=u(t),p=a,b=d["".concat(c,".").concat(p)]||d[p]||g[p]||o;return t?r.createElement(b,l(l({ref:n},s),{},{components:t})):r.createElement(b,l({ref:n},s))}));function b(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=p;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i[d]="string"==typeof e?e:a,l[1]=i;for(var u=2;u<o;u++)l[u]=t[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},334:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>c,toc:()=>s});t(7294);var r=t(3905);function a(){return a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},a.apply(this,arguments)}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}const l={},i="edge cloud",c={unversionedId:"kubernetes/kube-edge",id:"kubernetes/kube-edge",title:"edge cloud",description:"\u4e3b\u8981 \u4fee\u6539\u5bb9\u5668\u8fd0\u884c\u65f6\u3001cgroup \u9a71\u52a8",source:"@site/docs/kubernetes/kube-edge.md",sourceDirName:"kubernetes",slug:"/kubernetes/kube-edge",permalink:"/docs/kubernetes/kube-edge",draft:!1,tags:[],version:"current",lastUpdatedAt:1675912862,formattedLastUpdatedAt:"2023\u5e742\u67089\u65e5",frontMatter:{},sidebar:"kubernetes",previous:{title:"k8sos",permalink:"/docs/kubernetes/k8sos"},next:{title:"kubebuilder-quick-start",permalink:"/docs/kubernetes/kubebuilder/kubebuilder-quick-start"}},u={},s=[],d={toc:s},g="wrapper";function p(e){var{components:n}=e,t=o(e,["components"]);return(0,r.kt)(g,a({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",a({},{id:"edge-cloud"}),"edge cloud"),(0,r.kt)("h1",a({},{id:"edge-core"}),"edge core"),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{className:"language-shell"}),"# \u4e0b\u8f7d kubeedge\n$ wget https://github.com/kubeedge/kubeedge/releases/download/v1.7.1/kubeedge-v1.7.1-linux-arm.tar.gz\n\n# \u89e3\u538b\n$ tar zxvf kubeedge-v1.7.1-linux-arm.tar.gz\n\n$ mv kubeedge-v1.7.1-linux-arm/edge/edgecore /usr/local/bin\n\n$ mkdir -p /etc/kubeedge/config\n\n$ edgecore --defaultconfig > /etc/kubeedge/config/edgecore.yaml\n")),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{className:"language-yaml"}),'# With --defaultconfig flag, users can easily get a default full config file as reference, with all fields (and field descriptions) included and default values set. \n# Users can modify/create their own configs accordingly as reference. \n# Because it is a full configuration, it is more suitable for advanced users.\n\napiVersion: edgecore.config.kubeedge.io/v1alpha1\ndatabase:\n  aliasName: default\n  dataSource: /var/lib/kubeedge/edgecore.db\n  driverName: sqlite3\nkind: EdgeCore\nmodules:\n  dbTest:\n    enable: false\n  deviceTwin:\n    enable: true\n  edgeHub:\n    enable: true\n    heartbeat: 15\n    httpServer: https://10.8.30.38:10002\n    projectID: e632aba927ea4ac2b575ec1603d56f10\n    quic:\n      enable: false\n      handshakeTimeout: 30\n      readDeadline: 15\n      server: 10.8.30.38:10001\n      writeDeadline: 15\n    rotateCertificates: true\n    tlsCaFile: /etc/kubeedge/ca/rootCA.crt\n    tlsCertFile: /etc/kubeedge/certs/server.crt\n    tlsPrivateKeyFile: /etc/kubeedge/certs/server.key\n    token: 5e630e7bf11b00a77a513233e067788e12d36179be1d4b83d804bf77c463781e.eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MjY3Mjk1MTd9.s3XbFEZ1O2XvsVzRnTFpHPGNbOzttjvh5cp3xzxCeCY\n    websocket:\n      enable: true\n      handshakeTimeout: 30\n      readDeadline: 15\n      server: 10.8.30.38:10000\n      writeDeadline: 15\n  edgeMesh:\n    enable: false\n    lbStrategy: RoundRobin\n    listenInterface: docker0\n    listenPort: 40001\n    subNet: 9.251.0.0/16\n  edgeStream:\n    enable: false\n    handshakeTimeout: 30\n    readDeadline: 15\n    server: 127.0.0.1:10004\n    tlsTunnelCAFile: /etc/kubeedge/ca/rootCA.crt\n    tlsTunnelCertFile: /etc/kubeedge/certs/server.crt\n    tlsTunnelPrivateKeyFile: /etc/kubeedge/certs/server.key\n    writeDeadline: 15\n  edged:\n    cgroupDriver: systemd\n    cgroupRoot: ""\n    cgroupsPerQOS: true\n    clusterDNS: ""\n    clusterDomain: ""\n    cniBinDir: /opt/cni/bin\n    cniCacheDirs: /var/lib/cni/cache\n    cniConfDir: /etc/cni/net.d\n    networkPluginName: cni\n    concurrentConsumers: 5\n    devicePluginEnabled: false\n    dockerAddress: unix:///var/run/docker.sock\n    edgedMemoryCapacity: 7852396000\n    enable: true\n    enableMetrics: false\n    gpuPluginEnabled: false\n    hostnameOverride: raspberrypi-1\n    imageGCHighThreshold: 80\n    imageGCLowThreshold: 40\n    imagePullProgressDeadline: 60\n    maximumDeadContainersPerPod: 1\n    networkPluginMTU: 1500\n    nodeIP: 10.8.30.100\n    nodeStatusUpdateFrequency: 10\n    podSandboxImage: kubeedge/pause-arm:3.1\n    registerNode: true\n    registerNodeNamespace: default\n    remoteImageEndpoint: unix:///run/containerd/containerd.sock\n    remoteRuntimeEndpoint: unix:///run/containerd/containerd.sock\n    runtimeRequestTimeout: 2\n    runtimeType: remote\n    volumeStatsAggPeriod: 60000000000\n  eventBus:\n    enable: true\n    eventBusTLS:\n      enable: false\n      tlsMqttCAFile: /etc/kubeedge/ca/rootCA.crt\n      tlsMqttCertFile: /etc/kubeedge/certs/server.crt\n      tlsMqttPrivateKeyFile: /etc/kubeedge/certs/server.key\n    mqttMode: 2\n    mqttQOS: 0\n    mqttRetain: false\n    mqttServerExternal: tcp://127.0.0.1:1883\n    mqttServerInternal: tcp://127.0.0.1:1884\n    mqttSessionQueueSize: 100\n  metaManager:\n    contextSendGroup: hub\n    contextSendModule: websocket\n    enable: true\n    metaServer:\n      debug: false\n      enable: false\n    podStatusSyncInterval: 90\n    remoteQueryTimeout: 90\n  serviceBus:\n    enable: false\n')),(0,r.kt)("p",null,"\u4e3b\u8981 \u4fee\u6539\u5bb9\u5668\u8fd0\u884c\u65f6\u3001cgroup \u9a71\u52a8"),(0,r.kt)("p",null,"\u8fd0\u884c "),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{className:"language-shell"}),"edgecore\n")),(0,r.kt)("p",null,"\u5982\u4e0b\u9519\u8bef\uff1a"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"edgecore","[45472]",": E0407 06:52:35.569727   45472 edged.go:742] Failed to start container manager, err: system validation failed - Following Cgroup subsystem not mounted: ","[memory]","\nedgecore","[45472]",": E0407 06:52:35.569777   45472 edged.go:293] initialize module error: system validation failed - Following Cgroup subsystem not mounted: ","[memory]")),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{className:"language-shell"}),"# \u5185\u5b58\u8d44\u6e90\u7684cgroups\u673a\u5236\u6ca1\u6709\u5f00\u542f\n\n# \u4fee\u6539\u542f\u52a8\u53c2\u6570\n$ vim /boot/cmdline.txt\n\n# \u8ffd\u52a0\ncgroup_memory=1 cgroup_enable=memory\n\n\n# \u67e5\u770b\u53ef\u7528\u7684cgroup\n$ cat /proc/cgroups\n")),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{className:"language-bash"}),"scp k8s-master:/etc/cni/net.d/* /etc/cni/net.d/\n")))}p.isMDXComponent=!0}}]);