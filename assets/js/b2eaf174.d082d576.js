"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6483],{3905:(e,n,a)=>{a.d(n,{Zo:()=>c,kt:()=>u});var t=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function s(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?s(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function p(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},s=Object.keys(e);for(t=0;t<s.length;t++)a=s[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)a=s[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=t.createContext({}),i=function(e){var n=t.useContext(l),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},c=function(e){var n=i(e.components);return t.createElement(l.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},g=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),m=i(a),g=r,u=m["".concat(l,".").concat(g)]||m[g]||d[g]||s;return a?t.createElement(u,o(o({ref:n},c),{},{components:a})):t.createElement(u,o({ref:n},c))}));function u(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=a.length,o=new Array(s);o[0]=g;var p={};for(var l in n)hasOwnProperty.call(n,l)&&(p[l]=n[l]);p.originalType=e,p[m]="string"==typeof e?e:r,o[1]=p;for(var i=2;i<s;i++)o[i]=a[i];return t.createElement.apply(null,o)}return t.createElement.apply(null,a)}g.displayName="MDXCreateElement"},589:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>p,default:()=>g,frontMatter:()=>o,metadata:()=>l,toc:()=>c});a(7294);var t=a(3905);function r(){return r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var a=arguments[n];for(var t in a)Object.prototype.hasOwnProperty.call(a,t)&&(e[t]=a[t])}return e},r.apply(this,arguments)}function s(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},s=Object.keys(e);for(t=0;t<s.length;t++)a=s[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)a=s[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}const o={index:!1,icon:"devops",title:"gitea in k8s",date:new Date("2020-03-28T00:00:00.000Z"),category:["dev&ops"],tag:["gitea"]},p="\u8bbe\u7f6estorageClass",l={unversionedId:"dev&ops/git/gitea",id:"dev&ops/git/gitea",title:"gitea in k8s",description:"\u7531\u4e8e \u90e8\u7f72 \u662f\u4f7f\u7528\u7684 microk8s \u5e76\u4e14\u8fd9\u4e2a\u5c0f\u96c6\u7fa4\u53ea\u6709\u4e00\u53f0\u670d\u52a1\u5668\uff0c\u6240\u4ee5\u5b58\u50a8\u5c31\u4fdd\u5b58\u5230\u672c\u5730",source:"@site/docs/dev&ops/git/gitea.md",sourceDirName:"dev&ops/git",slug:"/dev&ops/git/gitea",permalink:"/docs/dev&ops/git/gitea",draft:!1,tags:[],version:"current",lastUpdatedAt:1675912862,formattedLastUpdatedAt:"2023\u5e742\u67089\u65e5",frontMatter:{index:!1,icon:"devops",title:"gitea in k8s",date:"2020-03-28T00:00:00.000Z",category:["dev&ops"],tag:["gitea"]},sidebar:"dev&ops",previous:{title:"git start",permalink:"/docs/dev&ops/git/git-start"},next:{title:"gitkab in docker",permalink:"/docs/dev&ops/git/gitlab-ce-install"}},i={},c=[{value:"\u8bbe\u7f6e pvc",id:"\u8bbe\u7f6e-pvc",level:2},{value:"\u914d\u7f6e",id:"\u914d\u7f6e",level:3}],m={toc:c},d="wrapper";function g(e){var{components:n}=e,a=s(e,["components"]);return(0,t.kt)(d,r({},m,a,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("h1",r({},{id:"\u8bbe\u7f6estorageclass"}),"\u8bbe\u7f6e",(0,t.kt)("inlineCode",{parentName:"h1"},"storageClass")),(0,t.kt)("blockquote",null,(0,t.kt)("p",{parentName:"blockquote"},"\u7531\u4e8e \u90e8\u7f72 \u662f\u4f7f\u7528\u7684 microk8s \u5e76\u4e14\u8fd9\u4e2a\u5c0f\u96c6\u7fa4\u53ea\u6709\u4e00\u53f0\u670d\u52a1\u5668\uff0c\u6240\u4ee5\u5b58\u50a8\u5c31\u4fdd\u5b58\u5230\u672c\u5730")),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"storageClass.yaml")),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-yaml"}),'apiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  annotations:\n    storageclass.kubernetes.io/is-default-class: "false"\n  name: microk8s-localhost\nprovisioner: microk8s.io/hostpath\nreclaimPolicy: Retain\nvolumeBindingMode: Immediate\n')),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-bash"}),"$ kubectl apply -f storageClass.yaml\n\n\n$ kubectl get sc \nNAME                          PROVISIONER            RECLAIMPOLICY   VOLUMEBINDINGMODE   ALLOWVOLUMEEXPANSION   AGE\nmicrok8s-hostpath (default)   microk8s.io/hostpath   Delete          Immediate           false                  4d4h\nmicrok8s-localhost            microk8s.io/hostpath   Retain          Immediate           false                  3d1h\n")),(0,t.kt)("h1",r({},{id:"\u90e8\u7f72\u6570\u636e\u5e93"}),"\u90e8\u7f72\u6570\u636e\u5e93"),(0,t.kt)("h2",r({},{id:"\u8bbe\u7f6e-pvc"}),"\u8bbe\u7f6e pvc"),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"pg-pvc.yaml")),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-yaml"}),'kind: PersistentVolume\napiVersion: v1\nmetadata:\n  name: postgres-data-pv\n  labels:\n    type: local\n    app: postgres-data\nspec:\n  storageClassName: microk8s-localhost\n  capacity:\n    storage: 15Gi\n  accessModes:\n    - ReadWriteMany\n  hostPath:\n    path: "/var/local/postgresql/data"\n---\nkind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: postgres-data-pvc\n  namespace: devops\n  labels:\n    app: postgres-data\nspec:\n  storageClassName: microk8s-localhost\n  accessModes:\n    - ReadWriteMany\n  resources:\n    requests:\n      storage: 10Gi\n\n')),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-bash"}),"$ kubectl apply -f pg-pvc.yaml\n\n$ kubectl get pv \nNAME               CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                      STORAGECLASS         REASON   AGE\npostgres-data-pv   15Gi       RWX            Retain           Bound    devops/postgres-data-pvc   microk8s-localhost            3d\n\n$ kubectl get pvc -n devops\nNAME                STATUS   VOLUME             CAPACITY   ACCESS MODES   STORAGECLASS         AGE\npostgres-data-pvc   Bound    postgres-data-pv   15Gi       RWX            microk8s-localhost   3d\n\n")),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"configmap.yaml")),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-yaml"}),"apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: cm-postgres\n  namespace: devops\n  labels:\n    app: postgres\ndata:\n  POSTGRES_PASSWORD: postgres\n")),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-shell"}),"$ kubectl apply -f configmap.yaml\n\n$ kubectl get cm -n devops\nNAME               DATA   AGE\nkube-root-ca.crt   1      3d5h\ncm-postgres        1      2d2h\n\n")),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"deployment.yaml")),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-yaml"}),"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: gitea-postgres\n  namespace: devops\nspec:\n  selector:\n    matchLabels:\n      app: postgres\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n        - name: gitea-postgres\n          image: postgres:12-alpine\n          ports:\n            - containerPort: 5432\n              name: pg-port\n          envFrom:\n            - configMapRef:\n                name: cm-postgres\n          volumeMounts:\n            - mountPath: /var/lib/postgresql/data\n              name: postgres-data-volume\n      volumes:\n        - name: postgres-data-volume\n          persistentVolumeClaim:\n            claimName: postgres-data-pvc\n")),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-bash"}),"$ kubectl apply -f deployment.yaml\n\n$ kubectl get po -n devops\nNAME                              READY   STATUS    RESTARTS   AGE\ngitea-postgres-86d6b8c4c7-rbt45   1/1     Running   0          2d1h\n\n")),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"service.yaml")),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-yaml"}),"apiVersion: v1\nkind: Service\nmetadata:\n  name: postgres-service\n  namespace: devops\n  labels:\n    app: postgres\nspec:\n  type: NodePort\n  ports:\n  - port: 5432\n    targetPort: 5432\n    protocol: TCP\n    name: pg-port\n    nodePort: 30432\n  selector:\n   app: postgres\n")),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-shell"}),"$ kubectl apply -f service.yaml\n\n\n$ kubectl get svc -n devops\nNAME               TYPE       CLUSTER-IP       EXTERNAL-IP   PORT(S)                       AGE\npostgres-service   NodePort   10.152.183.142   <none>        5432:30432/TCP                2d1h\n\n")),(0,t.kt)("h3",r({},{id:"\u914d\u7f6e"}),"\u914d\u7f6e"),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"postgresql.conf")),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-properties"}),"\n# \u65f6\u533a\u4fee\u6539\nlog_timezone = 'Asia/Shanghai'\ntimezone = 'Asia/Shanghai'\n\n\n# \u5bc6\u7801\u52a0\u5bc6\u7b97\u6cd5\u4fee\u6539\npassword_encryption = scram-sha-256\n")),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"pg_hba.conf")),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-properties"}),"# \u672c\u5730\u8bbf\u95ee\nlocal   giteadb         gitea                                   scram-sha-256\n\n# \u8fdc\u7a0b\u8bbf\u95ee\nhost    giteadb         gitea           0.0.0.0/0               scram-sha-256\n")),(0,t.kt)("p",null,"\u91cd\u542f\u6570\u636e\u5e93"),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-sql"}),"# \u521b\u5efa\u7528\u6237\u548c\u6570\u636e\u5e93\n\nCREATE ROLE gitea WITH LOGIN PASSWORD 'gitea';\n\nCREATE DATABASE giteadb WITH OWNER gitea TEMPLATE template0 ENCODING UTF8 LC_COLLATE 'en_US.UTF-8' LC_CTYPE 'en_US.UTF-8';\n\n")),(0,t.kt)("h1",r({},{id:"\u90e8\u7f72-gitea"}),"\u90e8\u7f72 ",(0,t.kt)("inlineCode",{parentName:"h1"},"Gitea")),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"gitea-pvc.yaml")),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-yaml"}),'kind: PersistentVolume\napiVersion: v1\nmetadata:\n  name: gitea-data-pv\n  labels:\n    type: local\n    app: gitea\nspec:\n  storageClassName: microk8s-localhost\n  capacity:\n    storage: 500Gi\n  accessModes:\n    - ReadWriteMany\n  hostPath:\n    path: "/var/local/gitea/data"\n---\nkind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: gitea-data-pvc\n  namespace: devops\n  labels:\n    app: gitea\nspec:\n  storageClassName: microk8s-localhost\n  accessModes:\n    - ReadWriteMany\n  resources:\n    requests:\n      storage: 200Gi\n')),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-shell"}),"$ kubectl apply -f gitea-pvc.yaml\n\n$ kubectl get pv \nNAME               CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                      STORAGECLASS         REASON   AGE\npostgres-data-pv   15Gi       RWX            Retain           Bound    devops/postgres-data-pvc   microk8s-localhost            3d\ngitea-data-pv      500Gi      RWX            Retain           Bound    devops/gitea-data-pvc      microk8s-localhost            47h\n$ kubectl get pvc -n devops\nNAME                STATUS   VOLUME             CAPACITY   ACCESS MODES   STORAGECLASS         AGE\npostgres-data-pvc   Bound    postgres-data-pv   15Gi       RWX            microk8s-localhost   3d\ngitea-data-pvc      Bound    gitea-data-pv      500Gi      RWX            microk8s-localhost   47h\n\n")),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"configmap.yaml")),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-yaml"}),'\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: cm-gitea\n  namespace: devops\n  labels:\n    app: gitea\ndata:\n  DB_TYPE: "postgres"\n  DB_HOST: "postgres-service:5432"\n  DB_NAME: "giteadb"\n  DB_USER: "gitea"\n  DB_PASSWD: "gitea"\n\n')),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-shell"}),"$ kubectl apply -f configmap.yaml\n\n$ kubectl get cm -n devops\nNAME               DATA   AGE\nkube-root-ca.crt   1      3d5h\ncm-postgres        1      2d2h\ncm-gitea           6      29h\n\n")),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"deployment.yaml")),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-yaml"}),"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: gitea\n  namespace: devops\nspec:\n  selector:\n    matchLabels:\n      app: gitea\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: gitea\n    spec:\n      containers:\n        - name: gitea\n          image: gitea/gitea:1.14.6\n          ports:\n            - containerPort: 22\n              name: ssh\n            - containerPort: 3000\n              name: http-port\n          envFrom:\n            - configMapRef:\n                name: cm-gitea\n          volumeMounts:\n            - mountPath: /data\n              name: gitea-data-volume\n      volumes:\n        - name: gitea-data-volume\n          persistentVolumeClaim:\n            claimName: gitea-data-pvc\n\n")),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-shell"}),"$ kubectl apply -f deployment.yaml\n\n$ kubectl get po -n devops\nNAME                              READY   STATUS    RESTARTS   AGE\ngitea-postgres-86d6b8c4c7-rbt45   1/1     Running   0          2d1h\ngitea-c4b69d788-mdm7g             1/1     Running   0          6h10m\n\n")),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"service.yaml")),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-yaml"}),"apiVersion: v1\nkind: Service\nmetadata:\n  name: gitea-service\n  namespace: devops\n  labels:\n    app: gitea\nspec:\n  type: NodePort\n  ports:\n  - port: 22\n    targetPort: 22\n    protocol: TCP\n    name: ssh\n    nodePort: 30022\n  - port: 3000\n    targetPort: 3000\n    protocol: TCP\n    name: http-port\n    nodePort: 30300\n  selector:\n   app: gitea\n")),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-shell"}),"$ kubectl apply -f service.yaml\n\n$ kubectl get svc -n devops\nNAME               TYPE       CLUSTER-IP       EXTERNAL-IP   PORT(S)                       AGE\npostgres-service   NodePort   10.152.183.142   <none>        5432:30432/TCP                2d1h\ngitea-service      NodePort   10.152.183.62    <none>        22:30022/TCP,3000:30300/TCP   29h\n")),(0,t.kt)("p",null,"\u914d\u7f6e"),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-ini"}),"[server]\nAPP_DATA_PATH    = /data/gitea\nDOMAIN           = gitea.free-sun.vip\nSSH_DOMAIN       = gitea.free-sun.vip\nHTTP_PORT        = 3000\nROOT_URL         = https://gitea.free-sun.vip/\nDISABLE_SSH      = false\nSSH_PORT         = 2022\nSSH_LISTEN_PORT  = 22\nLFS_START_SERVER = false\nLFS_CONTENT_PATH = /data/git/lfs\nLFS_JWT_SECRET   = ET6zJ0fRBl93bJiHrUAzOXa7xeicpEmY9weiyqwWQqI\nOFFLINE_MODE     = false\nLANDING_PAGE     = explore\n\n\n[mailer]\nENABLED        = true\nFROM           = anxinyunwarning@free-sun.com.cn\nMAILER_TYPE    = smtp\nHOST           = smtp.exmail.qq.com:465\nIS_TLS_ENABLED = true\nUSER           = anxinyunwarning@free-sun.com.cn\nPASSWD         = `SGVd7FU7vesjj9su`\n\n")),(0,t.kt)("p",null,"nginx \u914d\u7f6e"),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-properties"}),"# http \u589e\u52a0 server \n\nupstream  gitea-http {\n    server 192.168.0.121:30300;\n}\n\n\nserver {\n    listen 80;\n    server_name  gitea.free-sun.vip;\n    rewrite ^(.*) https://$server_name$1 permanent;\n}\n\n\nserver {\n    listen 443 ssl;\n    server_name  gitea.free-sun.vip;\n    client_max_body_size 5m;\n\n    ssl_certificate   /etc/nginx/certs/gitea.free-sun.pem;\n    ssl_certificate_key  /etc/nginx/certs/gitea.free-sun.key;\n    ssl_session_timeout 5m;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers on;\n\n    location / {\n        client_max_body_size 20m;\n        proxy_redirect off;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://gitea-http;\n        index index.html index.htm;\n    }\n}\n\n")),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-properties"}),"# stream  \u589e\u52a0 server  \u505a ssh \u8bbf\u95ee\nupstream gitea_backend {\n    hash $remote_addr consistent;\n    server 192.168.0.121:30022 max_fails=3 fail_timeout=30s;\n}\n\nserver {\n    listen 2022 so_keepalive=on;\n    tcp_nodelay    on;\n    proxy_pass     gitea_backend;\n    proxy_connect_timeout       20s;\n    proxy_timeout        30m;\n    proxy_buffer_size    32k;\n}\n")))}g.isMDXComponent=!0}}]);