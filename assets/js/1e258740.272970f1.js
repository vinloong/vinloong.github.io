"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8105],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),c=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,h=u["".concat(i,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(h,s(s({ref:t},p),{},{components:n})):r.createElement(h,s({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[u]="string"==typeof e?e:a,s[1]=l;for(var c=2;c<o;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7489:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>p});n(7294);var r=n(3905);function a(){return a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a.apply(this,arguments)}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}const s={title:"redia-ha",authors:"loong",tags:["k8s","redis"]},l=void 0,i={permalink:"/blog/2023/01/12/redia-ha",source:"@site/blog/2023-01-12-redia-ha.md",title:"redia-ha",description:"Redis can be accessed via port 6379 and Sentinel can be accessed via port 26379 on the following DNS name from within your cluster:",date:"2023-01-12T00:00:00.000Z",formattedDate:"2023\u5e741\u670812\u65e5",tags:[{label:"k8s",permalink:"/blog/tags/k-8-s"},{label:"redis",permalink:"/blog/tags/redis"}],readingTime:1.47,hasTruncateMarker:!1,authors:[{name:"Vinloong",title:"one dev",url:"https://lingwenlong.com",imageURL:"https://raw.githubusercontent.com/vinloong/imgchr/main/notes/2022/12/30/10-02-00-ae0172.png",key:"loong"}],frontMatter:{title:"redia-ha",authors:"loong",tags:["k8s","redis"]},nextItem:{title:"sealos start && ceph clean",permalink:"/blog/sealos ceph"}},c={authorsImageUrls:[void 0]},p=[],u={toc:p},d="wrapper";function m(e){var{components:t}=e,n=o(e,["components"]);return(0,r.kt)(d,a({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{className:"language-bash"}),"redis-ha-haproxy.redis-ha.svc\nredis-sentinel.redis-ha.svc\nredis-cluster.redis-ha.svc\n")),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{className:"language-bash"}),"helm fetch bitnami/redis --untar [--untardir ./]\nhelm install redis-sentinel . -n redis-ha\n")),(0,r.kt)("p",null,"Redis can be accessed via port 6379 and Sentinel can be accessed via port 26379 on the following DNS name from within your cluster:\n",(0,r.kt)("inlineCode",{parentName:"p"},"redis-ha.redis-ha.svc.cluster.local")),(0,r.kt)("p",null,"To connect to your Redis server:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"To retrieve the redis password:")),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{className:"language-bash"}),"   echo $(kubectl get secret redis-ha -o \"jsonpath={.data['auth']}\" | base64 --decode)\n")),(0,r.kt)("ol",a({},{start:2}),(0,r.kt)("li",{parentName:"ol"},"Connect to the Redis master pod that you can use as a client. By default the redis-ha-server-0 pod is configured as the master:")),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{className:"language-bash"}),"   kubectl exec -it redis-ha-server-0 sh -n redis-ha\n")),(0,r.kt)("ol",a({},{start:3}),(0,r.kt)("li",{parentName:"ol"},"Connect using the Redis CLI (inside container):")),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{className:"language-bash"}),"   redis-cli -a <REDIS-PASS-FROM-SECRET>\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," Please be patient while the chart is being deployed ")),(0,r.kt)("p",null,"Redis","\xae"," can be accessed via port 6379 on the following DNS name from within your cluster:"),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{}),"`redis-sentinel.redis-ha.svc.cluster.local` for read only operations\n")),(0,r.kt)("p",null,"For read/write operations, first access the Redis","\xae"," Sentinel cluster, which is available in port 26379 using the same domain name above."),(0,r.kt)("p",null,"To get your password run:"),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{className:"language-bash"}),'    export REDIS_PASSWORD=$(kubectl get secret --namespace redis-ha redis-ha-passwd -o jsonpath="{.data.redis-password}" | base64 -d)\n')),(0,r.kt)("p",null,"To connect to your Redis","\xae"," server:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Run a Redis","\xae"," pod that you can use as a client:")),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{className:"language-bash"}),"   kubectl run --namespace redis-ha redis-client --restart='Never'  --env REDIS_PASSWORD=$REDIS_PASSWORD  --image docker.io/bitnami/redis:7.0.7-debian-11-r9 --command -- sleep infinity\n\n   Use the following command to attach to the pod:\n\n   kubectl exec --tty -i redis-client \\\n   --namespace redis-ha -- bash\n")),(0,r.kt)("ol",a({},{start:2}),(0,r.kt)("li",{parentName:"ol"},"Connect using the Redis","\xae"," CLI:")),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{className:"language-bash"}),'   REDISCLI_AUTH="$REDIS_PASSWORD" redis-cli -h redis-sentinel -p 6379 # Read only operations\n   REDISCLI_AUTH="$REDIS_PASSWORD" redis-cli -h redis-sentinel -p 26379 # Sentinel access\n')),(0,r.kt)("p",null,"To connect to your database from outside the cluster execute the following commands:"),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{className:"language-bash"}),'    kubectl port-forward --namespace redis-ha svc/redis-sentinel 6379:6379 &\n    REDISCLI_AUTH="$REDIS_PASSWORD" redis-cli -h 127.0.0.1 -p 6379\n')))}m.isMDXComponent=!0}}]);