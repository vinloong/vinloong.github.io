"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3618],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),c=p(n),d=a,f=c["".concat(l,".").concat(d)]||c[d]||u[d]||s;return n?r.createElement(f,o(o({ref:t},m),{},{components:n})):r.createElement(f,o({ref:t},m))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:a,o[1]=i;for(var p=2;p<s;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1258:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>m});n(7294);var r=n(3905);function a(){return a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a.apply(this,arguments)}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}const o={id:"benchmark",title:"linux \u6027\u80fd\u57fa\u51c6\u6d4b\u8bd5",date:new Date("2022-05-16T00:00:00.000Z"),keywords:["linux"]},i="\u6d4b\u8bd5\u5de5\u5177",l={unversionedId:"linux/benchmark",id:"linux/benchmark",title:"linux \u6027\u80fd\u57fa\u51c6\u6d4b\u8bd5",description:"- sysbench",source:"@site/docs/linux/linux-benchmark.md",sourceDirName:"linux",slug:"/linux/benchmark",permalink:"/docs/linux/benchmark",draft:!1,tags:[],version:"current",lastUpdatedAt:1675912862,formattedLastUpdatedAt:"2023\u5e742\u67089\u65e5",frontMatter:{id:"benchmark",title:"linux \u6027\u80fd\u57fa\u51c6\u6d4b\u8bd5",date:"2022-05-16T00:00:00.000Z",keywords:["linux"]},sidebar:"linux",previous:{title:"linux kernel params \u4f18\u5316",permalink:"/docs/linux/kernel params \u4f18\u5316"},next:{title:"linux-file_system",permalink:"/docs/linux/linux-file_system"}},p={},m=[{value:"CPU",id:"cpu",level:2},{value:"\u5185\u5b58",id:"\u5185\u5b58",level:2},{value:"\u78c1\u76d8IO",id:"\u78c1\u76d8io",level:2}],c={toc:m},u="wrapper";function d(e){var{components:t}=e,n=s(e,["components"]);return(0,r.kt)(u,a({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",a({},{id:"\u6d4b\u8bd5\u5de5\u5177"}),"\u6d4b\u8bd5\u5de5\u5177"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"sysbench"),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"}," ",(0,r.kt)("inlineCode",{parentName:"p"},"sysbench"),"\u662f\u4e00\u6b3e\u5f00\u6e90\u7684\u591a\u7ebf\u7a0b\u6027\u80fd\u6d4b\u8bd5\u5de5\u5177\uff0c\u53ef\u4ee5\u6267\u884cCPU/\u5185\u5b58/\u7ebf\u7a0b/IO/\u6570\u636e\u5e93\u7b49\u65b9\u9762\u7684\u6027\u80fd\u6d4b\u8bd5\u3002"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"fio"),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"IO \u6d4b\u8bd5\u5de5\u5177")))),(0,r.kt)("h1",a({},{id:"\u5b89\u88c5"}),"\u5b89\u88c5"),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{className:"language-shell"}),"apt install sysbench fio\n")),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{className:"language-shell"}),"# sysbench --help\nUsage:\n  sysbench [options]... [testname] [command]\n\nCommands implemented by most tests: prepare run cleanup help\n\nGeneral options:\n  --threads=N                     number of threads to use [1]\n  --events=N                      limit for total number of events [0]\n  --time=N                        limit for total execution time in seconds [10]\n  --forced-shutdown=STRING        number of seconds to wait after the --time limit before forcing shutdown, or 'off' to disable [off]\n  --thread-stack-size=SIZE        size of stack per thread [64K]\n  --rate=N                        average transactions rate. 0 for unlimited rate [0]\n  --report-interval=N             periodically report intermediate statistics with a specified interval in seconds. 0 disables intermediate reports [0]\n  --report-checkpoints=[LIST,...] dump full statistics and reset all counters at specified points in time. The argument is a list of comma-separated values representing the amount of time in seconds elapsed from start of test when report checkpoint(s) must be performed. Report checkpoints are off by default. []\n  --debug[=on|off]                print more debugging info [off]\n  --validate[=on|off]             perform validation checks where possible [off]\n  --help[=on|off]                 print help and exit [off]\n  --version[=on|off]              print version and exit [off]\n  --config-file=FILENAME          File containing command line options\n  --tx-rate=N                     deprecated alias for --rate [0]\n  --max-requests=N                deprecated alias for --events [0]\n  --max-time=N                    deprecated alias for --time [0]\n  --num-threads=N                 deprecated alias for --threads [1]\n\nPseudo-Random Numbers Generator options:\n  --rand-type=STRING random numbers distribution {uniform,gaussian,special,pareto} [special]\n  --rand-spec-iter=N number of iterations used for numbers generation [12]\n  --rand-spec-pct=N  percentage of values to be treated as 'special' (for special distribution) [1]\n  --rand-spec-res=N  percentage of 'special' values to use (for special distribution) [75]\n  --rand-seed=N      seed for random number generator. When 0, the current time is used as a RNG seed. [0]\n  --rand-pareto-h=N  parameter h for pareto distribution [0.2]\n\nLog options:\n  --verbosity=N verbosity level {5 - debug, 0 - only critical messages} [3]\n\n  --percentile=N       percentile to calculate in latency statistics (1-100). Use the special value of 0 to disable percentile calculations [95]\n  --histogram[=on|off] print latency histogram in report [off]\n\nGeneral database options:\n\n  --db-driver=STRING  specifies database driver to use ('help' to get list of available drivers)\n  --db-ps-mode=STRING prepared statements usage mode {auto, disable} [auto]\n  --db-debug[=on|off] print database-specific debug information [off]\n\n\nCompiled-in database drivers:\n  mysql - MySQL driver\n  pgsql - PostgreSQL driver\n\nmysql options:\n  --mysql-host=[LIST,...]          MySQL server host [localhost]\n  --mysql-port=[LIST,...]          MySQL server port [3306]\n  --mysql-socket=[LIST,...]        MySQL socket\n  --mysql-user=STRING              MySQL user [sbtest]\n  --mysql-password=STRING          MySQL password []\n  --mysql-db=STRING                MySQL database name [sbtest]\n  --mysql-ssl[=on|off]             use SSL connections, if available in the client library [off]\n  --mysql-ssl-cipher=STRING        use specific cipher for SSL connections []\n  --mysql-compression[=on|off]     use compression, if available in the client library [off]\n  --mysql-debug[=on|off]           trace all client library calls [off]\n  --mysql-ignore-errors=[LIST,...] list of errors to ignore, or \"all\" [1213,1020,1205]\n  --mysql-dry-run[=on|off]         Dry run, pretend that all MySQL client API calls are successful without executing them [off]\n\npgsql options:\n  --pgsql-host=STRING     PostgreSQL server host [localhost]\n  --pgsql-port=N          PostgreSQL server port [5432]\n  --pgsql-user=STRING     PostgreSQL user [sbtest]\n  --pgsql-password=STRING PostgreSQL password []\n  --pgsql-db=STRING       PostgreSQL database name [sbtest]\n\nCompiled-in tests:\n  fileio - File I/O test\n  cpu - CPU performance test\n  memory - Memory functions speed test\n  threads - Threads subsystem performance test\n  mutex - Mutex performance test\n\nSee 'sysbench <testname> help' for a list of options for each test.\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u6d4b\u8bd5\u9879\uff1a"),(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},"fileio : \u6587\u4ef6IO\u6d4b\u8bd5"),(0,r.kt)("li",{parentName:"ul"},"CPU  \uff1a CPU \u6027\u80fd\u6d4b\u8bd5"),(0,r.kt)("li",{parentName:"ul"},"memory \uff1a \u5185\u5b58\u901f\u5ea6\u6d4b\u8bd5"),(0,r.kt)("li",{parentName:"ul"},"threads \uff1a \u7ebf\u7a0b\u5b50\u7cfb\u7edf\u6027\u80fd\u6d4b\u8bd5"),(0,r.kt)("li",{parentName:"ul"},"mutex \uff1a \u4e92\u65a5\u6027\u80fd\u6d4b\u8bd5\n\u9009\u9879 ","[options]",(0,r.kt)("inlineCode",{parentName:"li"},"-- threads"),"=n : \u7ebf\u7a0b\u6570\uff0c\u9ed8\u8ba4 1"))),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{className:"language-shell"}),'# fio --help\nfio-3.1\nfio [options] [job options] <job file(s)>\n  --debug=options    Enable debug logging. May be one/more of:\n            process,file,io,mem,blktrace,verify,random,parse,\n            diskutil,job,mutex,profile,time,net,rate,compress,\n            steadystate,helperthread\n  --parse-only        Parse options only, don\'t start any IO\n  --output        Write output to file\n  --bandwidth-log    Generate aggregate bandwidth logs\n  --minimal        Minimal (terse) output\n  --output-format=type    Output format (terse,json,json+,normal)\n  --terse-version=type    Set terse version output format (default 3, or 2 or 4)\n  --version        Print version info and exit\n  --help        Print this page\n  --cpuclock-test    Perform test/validation of CPU clock\n  --crctest=[type]    Test speed of checksum functions\n  --cmdhelp=cmd        Print command help, "all" for all of them\n  --enghelp=engine    Print ioengine help, or list available ioengines\n  --enghelp=engine,cmd    Print help for an ioengine cmd\n  --showcmd        Turn a job file into command line options\n  --eta=when        When ETA estimate should be printed\n                    May be "always", "never" or "auto"\n  --eta-newline=time    Force a new line for every \'time\' period passed\n  --status-interval=t    Force full status dump every \'t\' period passed\n  --readonly        Turn on safety read-only checks, preventing writes\n  --section=name    Only run specified section in job file, multiple sections can be specified\n  --alloc-size=kb    Set smalloc pool to this size in kb (def 16384)\n  --warnings-fatal    Fio parser warnings are fatal\n  --max-jobs=nr        Maximum number of threads/processes to support\n  --server=args        Start a backend fio server\n  --daemonize=pidfile    Background fio server, write pid to file\n  --client=hostname    Talk to remote backend(s) fio server at hostname\n  --remote-config=file    Tell fio server to load this local job file\n  --idle-prof=option    Report cpu idleness on a system or percpu basis\n            (option=system,percpu) or run unit work\n            calibration only (option=calibrate)\n  --inflate-log=log    Inflate and output compressed log\n  --trigger-file=file    Execute trigger cmd when file exists\n  --trigger-timeout=t    Execute trigger at this time\n  --trigger=cmd        Set this command as local trigger\n  --trigger-remote=cmd    Set this command as remote trigger\n  --aux-path=path    Use this path for fio state generated files\n\nFio was written by Jens Axboe <jens.axboe@oracle.com>\n                   Jens Axboe <jaxboe@fusionio.com>\n                   Jens Axboe <axboe@fb.com>\n')),(0,r.kt)("h1",a({},{id:"\u6d4b\u8bd5"}),"\u6d4b\u8bd5"),(0,r.kt)("h2",a({},{id:"cpu"}),"CPU"),(0,r.kt)("p",null,"sysbench\u7684cpu\u6d4b\u8bd5\u662f\u5728\u6307\u5b9a\u65f6\u95f4\u5185\uff0c\u5faa\u73af\u8fdb\u884c\u7d20\u6570\u8ba1\u7b97"),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{}),"\u7d20\u6570\uff08\u4e5f\u53eb\u8d28\u6570\uff09\u5c31\u662f\u4ece1\u5f00\u59cb\u7684\u81ea\u7136\u6570\u4e2d\uff0c\u65e0\u6cd5\u88ab\u6574\u9664\u7684\u6570\uff0c\u6bd4\u59822\u30013\u30015\u30017\u300111\u300113\u300117\u7b49\u3002\u7f16\u7a0b\u516c\u5f0f\uff1a\u5bf9\u6b63\u6574\u6570n\uff0c\u5982\u679c\u75282\u5230\u6839\u53f7n\u4e4b\u95f4\u7684\u6240\u6709\u6574\u6570\u53bb\u9664\uff0c\u5747\u65e0\u6cd5\u6574\u9664\uff0c\u5219n\u4e3a\u7d20\u6570\u3002\n")),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{className:"language-shell"}),"sysbench --test=cpu --cpu-max-prime=20000  --num-threads=32 run\nsysbench cpu --cpu-max-prime=20000  --threads=32 run\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"--cpu-max-prime")," : \u4ea7\u751f\u8d28\u6570\u7684\u4e0a\u9650\uff0c\u9ed8\u8ba4\u503c\u4e3a10000\n",(0,r.kt)("inlineCode",{parentName:"p"},"-num-threads")," : \u9700\u8981\u7684\u7ebf\u7a0b\u6570\uff0c\u9ed8\u8ba41 \uff08\u5f03\u7528\uff09"),(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"-\u2013threads")," \uff1a\u7ebf\u7a0b\u6570"),(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"\u2014time")," : \u8fd0\u884c\u65f6\u957f \u5355\u4f4d\uff1a \u79d2"),(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"\u2013-events")," :  event\u4e0a\u9650\u6b21\u6570 \u3002 \u9ed8\u8ba4\u503c\u4e3a0\uff0c\u5219\u8868\u793a\u4e0d\u9650event\u6b21\u6570\uff1b\u82e5\u8bbe\u7f6e\u4e3a100\uff0c\u5219\u8868\u793a\u5f53\u5b8c\u6210100\u6b21event\u540e\uff0c\u5373\u4f7f\u65f6\u95f4\u8fd8\u6709\u5269\uff0c\u4e5f\u505c\u6b62\u8fd0\u884c\uff1b\u76f8\u540cevent\u6b21\u6570\uff0c\u6bd4\u8f83\u7684\u662f\u8c01\u7528\u65f6\u66f4\u5c11\u3002")),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{className:"language-shell"}),"sysbench 1.0.11 (using system LuaJIT 2.1.0-beta3)\n\nRunning the test with following options:\nNumber of threads: 1\nInitializing random number generator from current time\n\n\nPrime numbers limit: 20000\n\nInitializing worker threads...\n\nThreads started!\n\nCPU speed:\n    events per second:   356.34\n\nGeneral statistics:\n    total time:                          10.0026s\n    total number of events:              3566\n\nLatency (ms):\n         min:                                  2.65\n         avg:                                  2.80\n         max:                                  6.71\n         95th percentile:                      3.02\n         sum:                              10000.32\n\nThreads fairness:\n    events (avg/stddev):           3566.0000/0.00\n    execution time (avg/stddev):   10.0003/0.00\n    \n")),(0,r.kt)("p",null,"\u7ed3\u679c\u5206\u6790\uff1a"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"events per second:  \u6240\u6709\u7ebf\u7a0b\u6bcf\u79d2\u5b8c\u6210\u4e86650.74\u6b21event"),(0,r.kt)("p",{parentName:"blockquote"},"total time:  \u5171\u8017\u65f610.0026\u79d2"),(0,r.kt)("p",{parentName:"blockquote"},"total number of events:  \u6240\u6709\u7ebf\u7a0b\u4e00\u5171\u5b8c\u6210\u4e863566\u6b21event"),(0,r.kt)("p",{parentName:"blockquote"},"min:                      2.65             \u5b8c\u62101\u6b21event\u7684\u6700\u5c11\u8017\u65f6 2.65 \u6beb\u79d2\navg:                       2.80             \u6240\u6709event\u7684\u5e73\u5747\u8017\u65f6 2.8 \u6beb\u79d2\nmax:                     6.71             \u5b8c\u62101\u6b21event\u7684\u6700\u5927\u8017\u65f6 6.71 \u6beb\u79d2\n95th percentile:  3.02             95%\u7684event\u5728 3.02 \u6beb\u79d2\u5185\u5b8c\u6210\nsum:                     10000.32     \u6bcf\u4e2a\u7ebf\u7a0b\u8017\u65f610\u79d2"),(0,r.kt)("p",{parentName:"blockquote"},"events (avg/stddev):   \u5e73\u5747\u6bcf\u4e2a\u7ebf\u7a0b\u5b8c\u6210 3566 \u6b21event\uff0c\u6807\u51c6\u5dee\u4e3a0"),(0,r.kt)("p",{parentName:"blockquote"},"execution time (avg/stddev):   \u6bcf\u4e2a\u7ebf\u7a0b\u5e73\u5747\u8017\u65f610\u79d2\uff0c\u6807\u51c6\u5dee\u4e3a0")),(0,r.kt)("h2",a({},{id:"\u5185\u5b58"}),"\u5185\u5b58"),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{className:"language-shell"}),"# sysbench --test=memory --memory-block-size=4K     --memory-total-size=10Gi --memory-oper=write --num-threads=32 run\nsysbench memory --memory-block-size=4K     --memory-total-size=10Gi --memory-oper=write --threads=32 run\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"--memory-block-size"),": \u5185\u5b58\u5757\u5927\u5c0f\n",(0,r.kt)("inlineCode",{parentName:"p"},"--memory-total-size")," : \u9700\u8981\u5185\u5b58\u603b\u5927\u5c0f\n",(0,r.kt)("inlineCode",{parentName:"p"},"--memory-oper"),": \u5185\u5b58\u64cd\u4f5c \uff1aread \u3001write\n",(0,r.kt)("inlineCode",{parentName:"p"},"--num-threads"),": \u7ebf\u7a0b\u6570 (\u5f03\u7528)\n",(0,r.kt)("inlineCode",{parentName:"p"},"--test")," \u6d4b\u8bd5\u9879\uff08\u5f03\u7528\uff09")),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{className:"language-shell"}),"WARNING: the --test option is deprecated. You can pass a script name or path on the command line without any options.\nWARNING: --num-threads is deprecated, use --threads instead\nsysbench 1.0.11 (using system LuaJIT 2.1.0-beta3)\n\nRunning the test with following options:\nNumber of threads: 32\nInitializing random number generator from current time\n\n\nRunning memory speed test with the following options:\n  block size: 4KiB\n  total size: 10240MiB\n  operation: write\n  scope: global\n\nInitializing worker threads...\n\nThreads started!\n\nTotal operations: 2621440 (2096569.03 per second)\n\n10240.00 MiB transferred (8189.72 MiB/sec)\n\n\nGeneral statistics:\n    total time:                          1.2457s\n    total number of events:              2621440\n\nLatency (ms):\n         min:                                  0.00\n         avg:                                  0.01\n         max:                                 28.02\n         95th percentile:                      0.02\n         sum:                              37142.60\n\nThreads fairness:\n    events (avg/stddev):           81920.0000/0.00\n    execution time (avg/stddev):   1.1607/0.05\n")),(0,r.kt)("h2",a({},{id:"\u78c1\u76d8io"}),"\u78c1\u76d8IO"),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{className:"language-shell"}),"fio -direct=1 -iodepth=128 -rw=rw -ioengine=libaio -bs=4k -size=1G -numjobs=1 -runtime=1000 -group_reporting -filename=iotest -name=randrw_test\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"-direct"),"\uff1a\u662f\u5426\u4f7f\u7528io\u7f13\u5b58\uff0c\u4e0d\u4f7f\u7528\u7f13\u5b58: direct=1\n",(0,r.kt)("inlineCode",{parentName:"p"},"-iodepth"),": \u961f\u5217\u6df1\u5ea6,\u5982\u679c\u6709\u591a\u4e2a\u7ebf\u7a0b\u6d4b\u8bd5\uff0c\u610f\u5473\u7740\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u662f\u6b64\u5904\u5b9a\u4e49\u7684\u961f\u5217\u6df1\u5ea6\u3002fio\u603b\u7684IO\u5e76\u53d1\u6570=iodepth * numjobs\n",(0,r.kt)("inlineCode",{parentName:"p"},"-bs")," \uff1a\u5b9a\u4e49 \u5757\u5927\u5c0f \u5355\u4f4d : k\u3001K\u3001m\u3001M.\n",(0,r.kt)("inlineCode",{parentName:"p"},"-size"),": \u5b9a\u4e49IO\u6d4b\u8bd5\u7684\u6570\u636e\u91cf\n",(0,r.kt)("inlineCode",{parentName:"p"},"-numjobs")," : \u5e76\u53d1\u7ebf\u7a0b\u6570\n",(0,r.kt)("inlineCode",{parentName:"p"},"-rw")," : \u6d4b\u8bd5\u65f6\u7684\u8bfb\u5199\u7b56\u7565\uff1a read(\u987a\u5e8f\u8bfb)\u3001write(\u987a\u5e8f\u5199)\u3001randread(\u968f\u673a\u8bfb)\u3001randwrite(\u968f\u673a\u5199)\u3001rw/readwrite(\u6df7\u5408\u987a\u5e8f\u8bfb\u5199)\u3001randrw(\u6df7\u5408\u968f\u673a\u8bfb\u5199)")),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{className:"language-shell"}),"randrw_test: (g=0): rw=randrw, bs=(R) 4096B-4096B, (W) 4096B-4096B, (T) 4096B-4096B, ioengine=libaio, iodepth=128\nfio-3.1\nStarting 1 process\nrandrw_test: Laying out IO file (1 file / 1024MiB)\nJobs: 1 (f=1): [m(1)][99.5%][r=3016KiB/s,w=3056KiB/s][r=754,w=764 IOPS][eta 00m:01s]  \nrandrw_test: (groupid=0, jobs=1): err= 0: pid=3261976: Tue May 17 16:13:41 2022\n   read: IOPS=665, BW=2663KiB/s (2727kB/s)(512MiB/196819msec)\n    slat (usec): min=2, max=251242, avg=59.67, stdev=1897.45\n    clat (usec): min=3, max=1903.4k, avg=111082.11, stdev=120777.99\n     lat (usec): min=30, max=1903.4k, avg=111142.18, stdev=120806.25\n    clat percentiles (usec):\n     |  1.00th=[     34],  5.00th=[   2835], 10.00th=[   9241],\n     | 20.00th=[  26084], 30.00th=[  42730], 40.00th=[  60556],\n     | 50.00th=[  79168], 60.00th=[ 101188], 70.00th=[ 130548],\n     | 80.00th=[ 175113], 90.00th=[ 235930], 95.00th=[ 308282],\n     | 99.00th=[ 574620], 99.50th=[ 750781], 99.90th=[1149240],\n     | 99.95th=[1317012], 99.99th=[1652556]\n   bw (  KiB/s): min=   16, max= 7560, per=99.90%, avg=2660.28, stdev=990.62, samples=393\n   iops        : min=    4, max= 1890, avg=665.07, stdev=247.65, samples=393\n  write: IOPS=666, BW=2664KiB/s (2728kB/s)(512MiB/196819msec)\n    slat (usec): min=2, max=510782, avg=72.89, stdev=2858.63\n    clat (usec): min=2, max=1643.0k, avg=80988.95, stdev=94180.11\n     lat (usec): min=27, max=1644.0k, avg=81062.24, stdev=94262.58\n    clat percentiles (usec):\n     |  1.00th=[     28],  5.00th=[     38], 10.00th=[    988],\n     | 20.00th=[  10028], 30.00th=[  26346], 40.00th=[  42206],\n     | 50.00th=[  58983], 60.00th=[  76022], 70.00th=[  95945],\n     | 80.00th=[ 127402], 90.00th=[ 189793], 95.00th=[ 235930],\n     | 99.00th=[ 408945], 99.50th=[ 541066], 99.90th=[ 977273],\n     | 99.95th=[1182794], 99.99th=[1417675]\n   bw (  KiB/s): min=    8, max= 7880, per=99.91%, avg=2661.73, stdev=1028.39, samples=393\n   iops        : min=    2, max= 1970, avg=665.43, stdev=257.10, samples=393\n  lat (usec)   : 4=0.01%, 20=0.01%, 50=3.87%, 100=0.41%, 250=0.50%\n  lat (usec)   : 500=0.57%, 750=0.52%, 1000=0.61%\n  lat (msec)   : 2=1.56%, 4=1.80%, 10=5.40%, 20=6.01%, 50=18.16%\n  lat (msec)   : 100=26.23%, 250=28.01%, 500=5.31%, 750=0.69%, 1000=0.22%\n  lat (msec)   : 2000=0.13%\n  cpu          : usr=0.95%, sys=3.01%, ctx=119939, majf=0, minf=501\n  IO depths    : 1=0.1%, 2=0.1%, 4=0.1%, 8=0.1%, 16=0.1%, 32=0.1%, >=64=100.0%\n     submit    : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, >=64=0.0%\n     complete  : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, >=64=0.1%\n     issued rwt: total=131040,131104,0, short=0,0,0, dropped=0,0,0\n     latency   : target=0, window=0, percentile=100.00%, depth=128\n\nRun status group 0 (all jobs):\n   READ: bw=2663KiB/s (2727kB/s), 2663KiB/s-2663KiB/s (2727kB/s-2727kB/s), io=512MiB (537MB), run=196819-196819msec\n  WRITE: bw=2664KiB/s (2728kB/s), 2664KiB/s-2664KiB/s (2728kB/s-2728kB/s), io=512MiB (537MB), run=196819-196819msec\n\nDisk stats (read/write):\n  sda: ios=129622/132008, merge=1403/5650, ticks=14267472/11267676, in_queue=25574756, util=100.00%\n")),(0,r.kt)("p",null,"\u7ed3\u679c\u5206\u6790\uff1a"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"IOPS: \u6bcf\u79d2\u7684\u8f93\u5165\u8f93\u51fa\u91cf(\u6216\u8bfb\u5199\u6b21\u6570)\uff0c\u662f\u8861\u91cf\u78c1\u76d8\u6027\u80fd\u7684\u4e3b\u8981\u6307\u6807\u4e4b\u4e00\uff1b"),(0,r.kt)("pre",{parentName:"blockquote"},(0,r.kt)("code",a({parentName:"pre"},{className:"language-shell"})," iops        : min=    4, max= 1890, avg=665.07, stdev=247.65, samples=393\n")),(0,r.kt)("p",{parentName:"blockquote"},"Bw: \u5e26\u5bbd\uff1b"),(0,r.kt)("pre",{parentName:"blockquote"},(0,r.kt)("code",a({parentName:"pre"},{className:"language-shell"}),"bw (  KiB/s): min=    8, max= 7880, per=99.91%, avg=2661.73, stdev=1028.39, samples=393\n")),(0,r.kt)("p",{parentName:"blockquote"},"IO\u5ef6\u65f6\uff1a"),(0,r.kt)("pre",{parentName:"blockquote"},(0,r.kt)("code",a({parentName:"pre"},{className:"language-shell"}),"slat (usec): min=2, max=510782, avg=72.89, stdev=2858.63\nclat (usec): min=2, max=1643.0k, avg=80988.95, stdev=94180.11\nlat (usec): min=27, max=1644.0k, avg=81062.24, stdev=94262.58\n")),(0,r.kt)("p",{parentName:"blockquote"},"usec\uff1a\u5fae\u79d2\uff1bmsec\uff1a\u6beb\u79d2\uff1b1ms=1000us\uff1b")))}d.isMDXComponent=!0}}]);