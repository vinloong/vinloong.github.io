"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2255],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>b});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},g="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),g=p(n),d=a,b=g["".concat(i,".").concat(d)]||g[d]||u[d]||l;return n?r.createElement(b,s(s({ref:t},c),{},{components:n})):r.createElement(b,s({ref:t},c))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,s=new Array(l);s[0]=d;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o[g]="string"==typeof e?e:a,s[1]=o;for(var p=2;p<l;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8183:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>c});n(7294);var r=n(3905);function a(){return a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a.apply(this,arguments)}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}const s={},o=void 0,i={unversionedId:"kubernetes/helm/gitlab",id:"kubernetes/helm/gitlab",title:"gitlab",description:"\u521b\u5efa postgres \u6570\u636e\u5e93\u548c\u5bc6\u7801",source:"@site/docs/kubernetes/helm/gitlab.md",sourceDirName:"kubernetes/helm",slug:"/kubernetes/helm/gitlab",permalink:"/docs/kubernetes/helm/gitlab",draft:!1,tags:[],version:"current",lastUpdatedAt:1675912862,formattedLastUpdatedAt:"2023\u5e742\u67089\u65e5",frontMatter:{},sidebar:"kubernetes",previous:{title:"\u7ed9\u4f60\u7684\u955c\u50cf\u7626\u8eab",permalink:"/docs/kubernetes/containers/image-slim"},next:{title:"\u5feb\u901f\u5165\u95e8",permalink:"/docs/kubernetes/helm/quickstart"}},p={},c=[{value:"\u521b\u5efa postgres \u6570\u636e\u5e93\u548c\u5bc6\u7801",id:"\u521b\u5efa-postgres-\u6570\u636e\u5e93\u548c\u5bc6\u7801",level:2},{value:"Redis \u914d\u7f6e",id:"redis-\u914d\u7f6e",level:2},{value:"\u521b\u5efa gitlab \u521d\u59cb\u5316 root \u5bc6\u7801",id:"\u521b\u5efa-gitlab-\u521d\u59cb\u5316-root-\u5bc6\u7801",level:2}],g={toc:c},u="wrapper";function d(e){var{components:t}=e,n=l(e,["components"]);return(0,r.kt)(u,a({},g,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{className:"language-shell"}),"helm repo add gitlab https://charts.gitlab.io/\nhelm repo update\n")),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{className:"language-shell"}),"helm install gitlab gitlab/gitlab --namespace gitlab --wait --version  5.9.3 \\\n  --set certmanager.install=false \\\n  --set gitlab-runner.install=false \\\n  --set nginx-ingress.enabled=false \\  \n  --set registry.enabled=false \\\n  --set global.edition=ce \\\n  --set global.hosts.domain=${MY_DOMAIN} \\\n  --set global.ingress.configureCertmanager=false \\\n  --set global.ingress.enabled=false \\  \n")),(0,r.kt)("h2",a({},{id:"\u521b\u5efa-postgres-\u6570\u636e\u5e93\u548c\u5bc6\u7801"}),"\u521b\u5efa postgres \u6570\u636e\u5e93\u548c\u5bc6\u7801"),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{className:"language-psql"}),'create user "fsgitlab" with password \'Fas123_\';\ncreate database "fs-gitlab" owner "fsgitlab";\nGRANT ALL PRIVILEGES ON DATABASE "fs-gitlab" TO fsgitlab;\n')),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{className:"language-shell"}),"kubectl create secret generic postgresql-password \\\n    --from-literal=postgresql-password=$(head -c 512 /dev/urandom | LC_CTYPE=C tr -cd 'a-zA-Z0-9' | head -c 64) \\\n    --from-literal=postgresql-postgres-password=Fas123_ -n gitlab\nsecret/postgresql-password created    \n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u589e\u52a0 postgres \u914d\u7f6e"),(0,r.kt)("pre",{parentName:"blockquote"},(0,r.kt)("code",a({parentName:"pre"},{className:"language-shell"}),"  --set postgresql.install=false \\\n  --set global.psql.host=anxinyun-pg \\\n  --set global.psql.password.secret=gitlab-postgresql-password \\\n  --set global.psql.password.key=postgresql-postgres-password \\\n  --set global.psql.database=fs-gitlab \\\n  --set global.psql.username=fsgitlab \\\n"))),(0,r.kt)("h2",a({},{id:"redis-\u914d\u7f6e"}),"Redis \u914d\u7f6e"),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{className:"language-yaml"}),"kind: Deployment\napiVersion: apps/v1\nmetadata:\n  name: gitlab-redis\n  namespace: gitlab\n  labels:\n    app: gitlab-redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: gitlab-redis\n  template:\n    metadata:\n      labels:\n        app: gitlab-redis\n    spec:\n      containers:\n        - name: gitlab-redis\n          image: 'redis:6-alpine'\n          ports:\n            - name: tcp-6379\n              containerPort: 6379\n              protocol: TCP\n      affinity:\n        nodeAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n            nodeSelectorTerms:\n              - matchExpressions:\n                  - key: app.type\n                    operator: In\n                    values:\n                      - compu\n---\nkind: Service\napiVersion: v1\nmetadata:\n  name: gitlab-redis\n  namespace: gitlab\n  labels:\n    app: gitlab-redis\nspec:\n  ports:\n    - name: tcp-6379\n      protocol: TCP\n      port: 6379\n      targetPort: 6379\n  selector:\n    app: gitlab-redis\n  clusterIP: None\n  type: ClusterIP\n\n\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u589e\u52a0 redis \u914d\u7f6e"),(0,r.kt)("pre",{parentName:"blockquote"},(0,r.kt)("code",a({parentName:"pre"},{className:"language-shell"}),"  --set redis.install=false \\\n  --set global.redis.host=gitlab-redis \\\n  --set global.redis.password.enabled=false \\  \n"))),(0,r.kt)("h2",a({},{id:"\u521b\u5efa-gitlab-\u521d\u59cb\u5316-root-\u5bc6\u7801"}),"\u521b\u5efa gitlab \u521d\u59cb\u5316 root \u5bc6\u7801"),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{className:"language-shell"}),"$ PASSWD=$(head -c 512 /dev/urandom | LC_CTYPE=C tr -cd 'a-zA-Z0-9' | head -c 32)\n$ kubectl create secret generic gitlab-initial-root-password --from-literal=password=$PASSWD -n gitlab\nsecret/gitlab-initial-root-password created\n$ echo $PASSWD\njP2zkf1ZHdDCPZR3YaNP57wt2Tiaw0ev\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u914d\u7f6e initialRootPassword:"),(0,r.kt)("pre",{parentName:"blockquote"},(0,r.kt)("code",a({parentName:"pre"},{className:"language-shell"}),"      --set global.initialRootPassword.secret=gitlab-initial-root-password \\\n"))))}d.isMDXComponent=!0}}]);